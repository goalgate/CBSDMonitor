package cn.cbdi.cbsdmonitor.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.cbdi.cbsdmonitor.Bean.Employees;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMPLOYEES".
*/
public class EmployeesDao extends AbstractDao<Employees, String> {

    public static final String TABLENAME = "EMPLOYEES";

    /**
     * Properties of entity Employees.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CardID = new Property(0, String.class, "CardID", true, "CARD_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property FpID = new Property(2, String.class, "FpID", false, "FP_ID");
        public final static Property FpTemp = new Property(3, String.class, "FpTemp", false, "FP_TEMP");
        public final static Property FaseBytes = new Property(4, byte[].class, "FaseBytes", false, "FASE_BYTES");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
    }


    public EmployeesDao(DaoConfig config) {
        super(config);
    }
    
    public EmployeesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMPLOYEES\" (" + //
                "\"CARD_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: CardID
                "\"NAME\" TEXT," + // 1: name
                "\"FP_ID\" TEXT," + // 2: FpID
                "\"FP_TEMP\" TEXT," + // 3: FpTemp
                "\"FASE_BYTES\" BLOB," + // 4: FaseBytes
                "\"TYPE\" INTEGER NOT NULL );"); // 5: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMPLOYEES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Employees entity) {
        stmt.clearBindings();
 
        String CardID = entity.getCardID();
        if (CardID != null) {
            stmt.bindString(1, CardID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String FpID = entity.getFpID();
        if (FpID != null) {
            stmt.bindString(3, FpID);
        }
 
        String FpTemp = entity.getFpTemp();
        if (FpTemp != null) {
            stmt.bindString(4, FpTemp);
        }
 
        byte[] FaseBytes = entity.getFaseBytes();
        if (FaseBytes != null) {
            stmt.bindBlob(5, FaseBytes);
        }
        stmt.bindLong(6, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Employees entity) {
        stmt.clearBindings();
 
        String CardID = entity.getCardID();
        if (CardID != null) {
            stmt.bindString(1, CardID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String FpID = entity.getFpID();
        if (FpID != null) {
            stmt.bindString(3, FpID);
        }
 
        String FpTemp = entity.getFpTemp();
        if (FpTemp != null) {
            stmt.bindString(4, FpTemp);
        }
 
        byte[] FaseBytes = entity.getFaseBytes();
        if (FaseBytes != null) {
            stmt.bindBlob(5, FaseBytes);
        }
        stmt.bindLong(6, entity.getType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Employees readEntity(Cursor cursor, int offset) {
        Employees entity = new Employees( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CardID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FpID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FpTemp
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // FaseBytes
            cursor.getInt(offset + 5) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Employees entity, int offset) {
        entity.setCardID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFpID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFpTemp(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFaseBytes(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Employees entity, long rowId) {
        return entity.getCardID();
    }
    
    @Override
    public String getKey(Employees entity) {
        if(entity != null) {
            return entity.getCardID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Employees entity) {
        return entity.getCardID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
